{
	"name": "ParkingsAnalytics",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "vollgazspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "34ef6573-dc15-4e38-91f6-5ba73d300c7c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/bff9c9b7-3548-4e32-9dd6-6e7b4385463d/resourceGroups/vollgaz-synapse-rg/providers/Microsoft.Synapse/workspaces/vollgaz-synapse-workspace/bigDataPools/vollgazspark",
				"name": "vollgazspark",
				"type": "Spark",
				"endpoint": "https://vollgaz-synapse-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/vollgazspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark.sql.functions as f\r\n",
					"df = spark.table('luxembourg_parkings.parkings')"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(\r\n",
					"    df\r\n",
					"    .select(f.col('id'),f.col('title'),f.col('actuel'),f.col('createdAt'))\r\n",
					"    .groupBy(f.col('id'),f.col('title'), f.window(\"createdAt\", \"1 hours\").alias('periode'))\r\n",
					"    .agg(f.min('actuel').alias('minimal'), f.max('actuel').alias('maximal'))\r\n",
					"    .select('*','periode.*')\r\n",
					"    .drop('periode')\r\n",
					"    .orderBy('id','start')\r\n",
					")\r\n",
					"\r\n",
					""
				],
				"execution_count": 27
			}
		]
	}
}